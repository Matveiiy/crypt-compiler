//class Vector2(x, y) {
//   this.x = x;
//    this.y = y;
//    this.add = (other) -> Vector2(this.x + other.x, this.y + other.y);
//}
//expr -> (x), x + y, x * y, x == y, x and y, x || y, x - y, -x -y, x(), x.y, x[0], (x, y) -> {}

//object:  identifier0000;  123; (<expr>);  (x, y, z); x(<expr>); x[<expr>]; identifier.identifier;
//operator: + - / * % and or ->
//<expr>: object | object operator object

//TODO: maybe тернарный, maybe битовые операции, annotations
fn lambdas() {
    a = a -> b;

    empty_paren = () -> () -> 3;
    ternary_max = (a, b) -> (a > b) -> a;
    //ternary = (a, b) -> a == b ? a | b;
    //ternary_max = (a, b) -> (a > b) ? a | b;
    //ternary_abs = a -> a>0 ? a | -a;
    //ternary_sign = x -> x > 0 ? 1 | -1;
    x = a -> b;
    x = (x) -> b;
    (a -> b) = x;
    a.b = 1;
    minus_check3 = a.b.c -2;
    add = (x, y) -> x + y;
    id = x -> x;
    id2 = x -> x;
    mod1 = x -> 2 * x + 3;
    mod2 = x -> { return 2 * x + 3; };
    add = (x, y, z) -> x + y+z;
    mult = (x, y, z) -> x*y + z[0];
    minus_check1 = a[0] -2;
    minus_check2 = a() -2;
    minus_check4 = a.b.c[0] -2 -a[0];
    something = (x, y) -> {
        z = (a) -> x + a;
        return z(y) * x;
    };
    adder = x -> y -> x + y;
    x = adder(2);
    if (adder(1)(2) == 3)
        println("OK");
    else
        println("Something went wrong, ooops");
    if (x(2) == 4)
        println("seems to work");
    else if (x(2) == 5)
        println("almost");
    else if (x(3) == 5)
        println("else check");
    else
        println("not even close");
    if (x(2) == 4) {
        println("seems to work");
    } else if (x(2) == 5) {
        println("almost");
    } else if (x(3) == 5) {
        println("else check");
    } else {
        println("not even close");
    }
    literal = "hello world" * 2 + 3;//(
    literal = "hello world";
}
fn assert(val) { if (val == 0) throws("assertion failed"); }

fn objects() {
    a = Vector2(1, 2);
    b = Vector2(3, 4);
    c = a.add(b);
    assert(c.x == 4 and c.y == 6);
    if (c.x == 4 or c.y == 6) { println(1); }
}

fn loops_and_arrays(n) {
    arr = array(5);
    for (i = 0; i < n; i = i + 1) {
        arr[i] = i * n + i;
    }
    x = 1;
    while (x < n) {
        arr[x] = arr[x] + arr[x-1];
    }
    return stream(arr).filter(x -> x > 10).toArray();
}
//факториал, сортировка, поиск простого
fn factorial(n) {
    if (n <= 1) { return n; }
    return factorial(n) * factorial(n - 1);
}
fn merge_sort(arr, l, r) {
    for (i = 0; i < arr.size(); i = i + 1) {
        for (j = i + 1; j < arr.size(); j = j + 1) {
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}
fn isPrime(x) {
    for (i = 2; i * i <= x; i = i + 1) {
        if (x % i == 0)
            return 0;
    }
    return 1;
}
fn get_primes(n) {
    if (n <= 1) return 0;
    arr = list();
    for (i = 2; i < n; i = i + 1) {
        if (isPrime(i)) arr.append(i);
    }
    return arr;
}


fn main() {
    y = x = 2 + 3 * 4;
    if (y == 3) {
        while (1) {

        }
    }
}
fn garbage() {
// this is a comment
    y = x = 2; // we can write comments!
    if (y == 2) {
        while (y < 2 * 3) {
            y=y+1*x;
        }
    } else if (x == 3) {

    }
    else if (x == 4) {

    }
    else {
        x = 1;
    }
    x[2 * y + 1][1] = 1[2];
    //x[2][3*x()[0]] = a -> a;[2]();
    x[2][3*x()[0]] = a -> a[2]();
    //x[2][fn(a){return a;}[2[1]]] = fn(a){ return a; }[2]();
    //x[2][fn(a){return a;}[b[1]]] = fn(a){ return a; }[2]();
    //      (fn: (x, y) -> x + y + 1) * 3 + 1
    //      fn: (x, y) -> x + y + 1 * 3 + 1
    //z x
    //
    x = 1;
    x = 0;
    x = false;
    x = array(100);
    a = 1;
    b =  2;
    c = 3;
    d = a + b + c;
    //y = fn(a) { return a + b + c + d; };
//    return y; - error return should be last
    //x = fn(a, b) { a + b; };
    y = x(1, 2);
    x = 2 * 2 + 2;
    //x = y = fn(a) { return x + y + 1; } * 3 - 1;
    x = y = x() - 1;
    //x = y = fn(a) { x + y + 1; };
    //x = y = fn(a, b) { x + y + 1; };
    //x = y = fn(a,b,c) { x + y + 1; x(1, x * 2 + 3 * y); return y * 2; };
    z = y * x + 2 * 2;
}

//vector<pair<string, int>> jmps;


fn f() {
    b = 2;
}

fn g() {//10
    gg();//12
    return fff();
    // OP_CALL <16 bit>
}

fn fff() {//340
}

fn main() {//500
    z = f2();
    z();
}
fn h() {//600
    return g();
}
